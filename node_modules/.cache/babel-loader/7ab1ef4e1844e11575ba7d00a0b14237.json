{"ast":null,"code":"var _jsxFileName = \"/Users/development/Desktop/portfolio react/portfolio/src/components/projects/projectData.js\",\n    _s = $RefreshSig$();\n\nimport { render } from 'react-dom';\nimport React, { useState } from 'react';\nimport { useSprings, animated, interpolate } from 'react-spring';\nimport { useGesture } from 'react-use-gesture';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cards = ['https://upload.wikimedia.org/wikipedia/en/f/f5/RWS_Tarot_08_Strength.jpg', 'https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg', 'https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg', 'https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg', 'https://upload.wikimedia.org/wikipedia/en/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg', 'https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg']; // These two are just helpers, they curate spring data, values that are later being interpolated into css\n\nconst to = i => ({\n  x: 0,\n  y: i * -4,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\n\nconst from = i => ({\n  x: 0,\n  rot: 0,\n  scale: 1.5,\n  y: -1000\n}); // This is being used down there in the view, it interpolates rotation and scale into a css transform\n\n\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`;\n\nfunction Deck() {\n  _s();\n\n  const [gone] = useState(() => new Set()); // The set flags all the cards that are flicked out\n\n  const [props, set] = useSprings(cards.length, i => ({ ...to(i),\n    from: from(i)\n  })); // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n\n  const bind = useGesture(_ref => {\n    let {\n      args: [index],\n      down,\n      delta: [xDelta],\n      distance,\n      direction: [xDir],\n      velocity\n    } = _ref;\n    const trigger = velocity > 0.2; // If you flick hard enough it should trigger the card to fly out\n\n    const dir = xDir < 0 ? -1 : 1; // Direction should either point left or right\n\n    if (!down && trigger) gone.add(index); // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n\n    set(i => {\n      if (index !== i) return; // We're only interested in changing spring-data for the current spring\n\n      const isGone = gone.has(index);\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0; // When a card is gone it flys out left or right, otherwise goes back to zero\n\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0); // How much the card tilts, flicking it harder makes it rotate faster\n\n      const scale = down ? 1.1 : 1; // Active cards lift up a bit\n\n      return {\n        x,\n        rot,\n        scale,\n        delay: undefined,\n        config: {\n          friction: 50,\n          tension: down ? 800 : isGone ? 200 : 500\n        }\n      };\n    });\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600);\n  }); // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n\n  return props.map((_ref2, i) => {\n    let {\n      x,\n      y,\n      rot,\n      scale\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(animated.div, {\n      style: {\n        transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`)\n      },\n      children: /*#__PURE__*/_jsxDEV(animated.div, { ...bind(i),\n        style: {\n          transform: interpolate([rot, scale], trans),\n          backgroundImage: `url(${cards[i]})`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this);\n  });\n}\n\n_s(Deck, \"GJ+tDNDoxUfn3sSn5jI87QbWEeI=\", false, function () {\n  return [useSprings, useGesture];\n});\n\n_c = Deck;\n\nvar _c;\n\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"names":["render","React","useState","useSprings","animated","interpolate","useGesture","cards","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","Deck","gone","Set","props","set","length","bind","args","index","down","delta","xDelta","distance","direction","xDir","velocity","trigger","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","transform","backgroundImage"],"sources":["/Users/development/Desktop/portfolio react/portfolio/src/components/projects/projectData.js"],"sourcesContent":["import { render } from 'react-dom'\nimport React, { useState } from 'react'\nimport { useSprings, animated, interpolate } from 'react-spring'\nimport { useGesture } from 'react-use-gesture'\nimport './styles.css'\n\nconst cards = [\n  'https://upload.wikimedia.org/wikipedia/en/f/f5/RWS_Tarot_08_Strength.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg'\n]\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = i => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\nconst from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 })\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\n\nfunction Deck() {\n  const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\n  const [props, set] = useSprings(cards.length, i => ({ ...to(i), from: from(i) })) // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n  const bind = useGesture(({ args: [index], down, delta: [xDelta], distance, direction: [xDir], velocity }) => {\n    const trigger = velocity > 0.2 // If you flick hard enough it should trigger the card to fly out\n    const dir = xDir < 0 ? -1 : 1 // Direction should either point left or right\n    if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n    set(i => {\n      if (index !== i) return // We're only interested in changing spring-data for the current spring\n      const isGone = gone.has(index)\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\n      const scale = down ? 1.1 : 1 // Active cards lift up a bit\n      return { x, rot, scale, delay: undefined, config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 } }\n    })\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600)\n  })\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n  return props.map(({ x, y, rot, scale }, i) => (\n    <animated.div key={i} style={{ transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) }}>\n      {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\n      <animated.div {...bind(i)} style={{ transform: interpolate([rot, scale], trans), backgroundImage: `url(${cards[i]})` }} />\n    </animated.div>\n  ))\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}